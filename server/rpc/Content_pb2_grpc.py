# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Content_pb2 as Content__pb2


class ContentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Personalize = channel.unary_unary(
                '/Content/Personalize',
                request_serializer=Content__pb2.Contents.SerializeToString,
                response_deserializer=Content__pb2.ContentScheme.FromString,
                )
        self.InsertContents = channel.unary_unary(
                '/Content/InsertContents',
                request_serializer=Content__pb2.Contents.SerializeToString,
                response_deserializer=Content__pb2.Status.FromString,
                )
        self.Rollback = channel.unary_unary(
                '/Content/Rollback',
                request_serializer=Content__pb2.ContentIDs.SerializeToString,
                response_deserializer=Content__pb2.Status.FromString,
                )
        self.SemanticSearch = channel.unary_unary(
                '/Content/SemanticSearch',
                request_serializer=Content__pb2.Search.SerializeToString,
                response_deserializer=Content__pb2.ContentIDs.FromString,
                )
        self.CalculateSpamProbs = channel.unary_unary(
                '/Content/CalculateSpamProbs',
                request_serializer=Content__pb2.Sentences.SerializeToString,
                response_deserializer=Content__pb2.SpamProbs.FromString,
                )


class ContentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Personalize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertContents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SemanticSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateSpamProbs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Personalize': grpc.unary_unary_rpc_method_handler(
                    servicer.Personalize,
                    request_deserializer=Content__pb2.Contents.FromString,
                    response_serializer=Content__pb2.ContentScheme.SerializeToString,
            ),
            'InsertContents': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertContents,
                    request_deserializer=Content__pb2.Contents.FromString,
                    response_serializer=Content__pb2.Status.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=Content__pb2.ContentIDs.FromString,
                    response_serializer=Content__pb2.Status.SerializeToString,
            ),
            'SemanticSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.SemanticSearch,
                    request_deserializer=Content__pb2.Search.FromString,
                    response_serializer=Content__pb2.ContentIDs.SerializeToString,
            ),
            'CalculateSpamProbs': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateSpamProbs,
                    request_deserializer=Content__pb2.Sentences.FromString,
                    response_serializer=Content__pb2.SpamProbs.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Content', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Content(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Personalize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Content/Personalize',
            Content__pb2.Contents.SerializeToString,
            Content__pb2.ContentScheme.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertContents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Content/InsertContents',
            Content__pb2.Contents.SerializeToString,
            Content__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Content/Rollback',
            Content__pb2.ContentIDs.SerializeToString,
            Content__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SemanticSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Content/SemanticSearch',
            Content__pb2.Search.SerializeToString,
            Content__pb2.ContentIDs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateSpamProbs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Content/CalculateSpamProbs',
            Content__pb2.Sentences.SerializeToString,
            Content__pb2.SpamProbs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
