// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/Content.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	Personalize(ctx context.Context, in *Contents, opts ...grpc.CallOption) (*ContentScheme, error)
	InsertContents(ctx context.Context, in *Contents, opts ...grpc.CallOption) (*Status, error)
	Rollback(ctx context.Context, in *ContentIDs, opts ...grpc.CallOption) (*Status, error)
	SemanticSearch(ctx context.Context, in *Search, opts ...grpc.CallOption) (*ContentIDs, error)
	CalculateSpamProbs(ctx context.Context, in *Sentences, opts ...grpc.CallOption) (*SpamProbs, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) Personalize(ctx context.Context, in *Contents, opts ...grpc.CallOption) (*ContentScheme, error) {
	out := new(ContentScheme)
	err := c.cc.Invoke(ctx, "/Content/Personalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) InsertContents(ctx context.Context, in *Contents, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Content/InsertContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) Rollback(ctx context.Context, in *ContentIDs, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Content/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) SemanticSearch(ctx context.Context, in *Search, opts ...grpc.CallOption) (*ContentIDs, error) {
	out := new(ContentIDs)
	err := c.cc.Invoke(ctx, "/Content/SemanticSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CalculateSpamProbs(ctx context.Context, in *Sentences, opts ...grpc.CallOption) (*SpamProbs, error) {
	out := new(SpamProbs)
	err := c.cc.Invoke(ctx, "/Content/CalculateSpamProbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	Personalize(context.Context, *Contents) (*ContentScheme, error)
	InsertContents(context.Context, *Contents) (*Status, error)
	Rollback(context.Context, *ContentIDs) (*Status, error)
	SemanticSearch(context.Context, *Search) (*ContentIDs, error)
	CalculateSpamProbs(context.Context, *Sentences) (*SpamProbs, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) Personalize(context.Context, *Contents) (*ContentScheme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Personalize not implemented")
}
func (UnimplementedContentServer) InsertContents(context.Context, *Contents) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertContents not implemented")
}
func (UnimplementedContentServer) Rollback(context.Context, *ContentIDs) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedContentServer) SemanticSearch(context.Context, *Search) (*ContentIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SemanticSearch not implemented")
}
func (UnimplementedContentServer) CalculateSpamProbs(context.Context, *Sentences) (*SpamProbs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSpamProbs not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_Personalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Personalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Content/Personalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Personalize(ctx, req.(*Contents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_InsertContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).InsertContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Content/InsertContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).InsertContents(ctx, req.(*Contents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Content/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Rollback(ctx, req.(*ContentIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_SemanticSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).SemanticSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Content/SemanticSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).SemanticSearch(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CalculateSpamProbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sentences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CalculateSpamProbs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Content/CalculateSpamProbs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CalculateSpamProbs(ctx, req.(*Sentences))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Personalize",
			Handler:    _Content_Personalize_Handler,
		},
		{
			MethodName: "InsertContents",
			Handler:    _Content_InsertContents_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Content_Rollback_Handler,
		},
		{
			MethodName: "SemanticSearch",
			Handler:    _Content_SemanticSearch_Handler,
		},
		{
			MethodName: "CalculateSpamProbs",
			Handler:    _Content_CalculateSpamProbs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/Content.proto",
}
